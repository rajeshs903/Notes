sqoop eval --connect jdbc:mysql://quickstart.cloudera:3306/retail_db --username root --P --query "select * from order_items limit 10"
password : cloudera

1) sqoop import with only few columns
Sqoop import from account table only with selected columns
only order_status that are completed

sqoop eval --connect jdbc:mysql://quickstart.cloudera:3306/retail_db --username root --P --query "select * from order_items limit 10"
password : cloudera

sqoop import \
--connect jdbc:mysql://quickstart.cloudera:3306/retail_db \
--username root \
--password cloudera \
--table orders \
--target-dir /user/rajeshs/questions/problem1 \
-m 1 \
--fields-terminated-by "\t"

sqoop import \
--connect jdbc:mysql://quickstart.cloudera:3306/retail_db \
--username root \
--password cloudera \
--table orders \
--target-dir /user/rajeshs/questions/problem1 \
--where "order_id < 100" \
--columns "order_id,order_status,order_date" \
-m 1 \
--fields-terminated-by "\t"

=======
>>>>>>> 0bd0d8520c22c6cb63e9adfcbbc0c053396e3243
*/


/*
2) sqoop export with tab delimited data ..export to mysql provided table
Sqoop export 25 million records. data was tab delimited in hdfs

mysql -u retail_dba -h quickstart -p
password : cloudera

or 

mysql -u retail_dba -h nn01.itversity.com -p
password : itversity


CREATE TABLE `orders_exported2` (
  `order_id` int(11) NOT NULL AUTO_INCREMENT,
  `order_date` datetime NOT NULL,
  `order_status` varchar(45) NOT NULL,
  PRIMARY KEY (`order_id`)
) ENGINE=InnoDB AUTO_INCREMENT=68884 DEFAULT CHARSET=utf8 


*/


input data : 
hdfs dfs -cat /user/rajeshs/sqoop_import/retail_db/orders/part-m-00000 | head


export command :

sqoop export \
--connect jdbc:mysql://quickstart.cloudera:3306/retail_db \
--username retail_dba \
--password cloudera \
--table orders_exported2 \
--export-dir /user/rajeshs/sqoop_import/retail_db/orders \
--columns "order_id,order_date,order_status" \
--input-fields-terminated-by "," \
-m 12

verification :

select * from orders_exported2;

val orders = sc.textFile("/user/rajeshs/sqoop_import/retail_db/orders")
val orderDF =orders.map(x=> {
      val o= x.split(",")
      (o(0).toInt,o(1),o(2).toInt,o(3))
      }).toDF("order_id","order_date","order_item_order_id","order_status")

